// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  role      Role     @default(ADMIN)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts     Post[]
  comments  Comment[]
  sessions  Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts Post[]

  @@map("categories")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts PostTag[]

  @@map("tags")
}

model Post {
  id              String      @id @default(cuid())
  title           String
  slug            String      @unique
  content         String
  excerpt         String?
  featuredImage   String?
  status          PostStatus  @default(DRAFT)
  publishedAt     DateTime?
  scheduledAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // SEO fields
  metaTitle       String?
  metaDescription String?
  canonicalUrl    String?
  ogTitle         String?
  ogDescription   String?
  ogImage         String?
  twitterTitle    String?
  twitterDescription String?
  twitterImage    String?
  
  // Analytics
  viewCount       Int         @default(0)
  likeCount       Int         @default(0)
  shareCount      Int         @default(0)
  
  // Relations
  authorId        String
  author          User        @relation(fields: [authorId], references: [id])
  categoryId      String?
  category        Category?   @relation(fields: [categoryId], references: [id])
  tags            PostTag[]
  comments        Comment[]
  analytics       PostAnalytics[]

  @@map("posts")
}

model PostTag {
  postId String
  tagId  String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("post_tags")
}

model Comment {
  id        String        @id @default(cuid())
  content   String
  status    CommentStatus @default(PENDING)
  authorName String?
  authorEmail String?
  authorUrl String?
  ipAddress String?
  userAgent String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  postId   String
  post     Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId   String?
  user     User?   @relation(fields: [userId], references: [id])
  parentId String?
  parent   Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  @@map("comments")
}

model Media {
  id          String    @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String
  alt         String?
  caption     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("media")
}

model PostAnalytics {
  id        String   @id @default(cuid())
  postId    String
  date      DateTime @default(now())
  views     Int      @default(0)
  uniqueViews Int    @default(0)
  referrer  String?
  userAgent String?
  ipAddress String?
  country   String?
  city      String?

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, date])
  @@map("post_analytics")
}

model SiteSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  type        String   @default("string")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("site_settings")
}

model Backup {
  id          String      @id @default(cuid())
  filename    String
  size        Int
  type        BackupType  @default(FULL)
  status      BackupStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  completedAt DateTime?
  error       String?

  @@map("backups")
}

// Enums
enum Role {
  ADMIN
  EDITOR
  AUTHOR
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  PRIVATE
  TRASH
}

enum CommentStatus {
  PENDING
  APPROVED
  SPAM
  TRASH
}

enum BackupType {
  FULL
  POSTS_ONLY
  MEDIA_ONLY
}

enum BackupStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

